#include <iostream>
#include <WinSock2.h>
#include <WS2tcpip.h>
#include <list>;
using namespace std;

int main()
{
	// Get twitch channel to connect to
	string twitchChannelUsername;
	cout << "Enter the user's twitch channel that you want to join: ";
	cin >> twitchChannelUsername;
	
	string temp1 = "Below is " + twitchChannelUsername + "'s chat.";
	cout << temp1 << endl;
	
	for (int i = 0; i < temp1.length(); i++)
	{
		cout << "~";
	}
	
	cout << endl;

	// Below handles networking aspect to connect to the indicated twitch channel
	WSADATA wsaData;

	// Load Winsock2 library
	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
	{
		wcout << "Could not start WinSock." << endl;
	}

	struct addrinfo* addr = nullptr;
	if (getaddrinfo("irc.chat.twitch.tv", "6667", nullptr, &addr) != 0)
	{
		wcout << "Failed to get address info." << endl;
	}

	SOCKET sock = INVALID_SOCKET;
	sock = socket(addr->ai_family, addr->ai_socktype, addr->ai_protocol);

	int i = connect(sock, addr->ai_addr, (int)addr->ai_addrlen);

	if (i != SOCKET_ERROR)
	{
		// Handshake with twitch
		string s;

		//Secret key generated by twitch

		//Enter oauth key
		s = "\r\n";
		send(sock, s.c_str(), s.length(), 0);

		//Enter nickname to be display
		s = "NICK \r\n";
		send(sock, s.c_str(), s.length(), 0);

		s = "JOIN #" + twitchChannelUsername + "\r\n";
		send(sock, s.c_str(), s.length(), 0);
	}

	char buffer[100];
	const int bufferSIZE = sizeof(buffer) / sizeof(buffer[0]);

	string s;
	string twitchPing = "PING :tmi.twitch.tv";
	string twitchPong = "PONG :tmi.twitch.tv\r\n";
	int messageCount = 0;

	while (1)
	{
		//Receive info and put in buffer
		int i = recv(sock, buffer, bufferSIZE, 0);
		for (int j = 0; j < i; j++)
		{
			s.append(1, buffer[j]);


			if (buffer[j] == '\n')
			{
				//Filter and pull chat messages

				//Find username
				size_t usernameDenote = s.find('!');
				string sUserName = s.substr(1, usernameDenote - 1);

				size_t n = s.find(':', usernameDenote);

				if (n != string::npos)
				{
					string chat = s.substr(n + 1);
					cout << "MSG " << messageCount << ": " << sUserName.c_str() << ": " << chat << endl;
					messageCount++;
				}

				if ( (s.compare(twitchPing)) == 0 )
				{
					send(sock, twitchPong.c_str(), twitchPong.length(), 0);
					cout << "SENDING PONG!" << endl;
				}

				cout << s << endl;
				s.clear();
			}
		}
	}

	return 0;
}